---
// Importamos los estilos de Leaflet
import 'leaflet/dist/leaflet.css';
import { proyectos } from '../data/proyectos';

// Obtener tipos únicos de proyectos
const tiposProyectos = [...new Set(proyectos.map(p => p.tipo))];
---

<section class="w-full bg-[#EAEAEA] py-8 md:py-12">
  <div class="max-w-6xl mx-auto px-4">
    <div class="flex flex-col md:flex-row gap-6 md:gap-8">
      <!-- Lista de proyectos -->
      <div class="w-full md:w-1/3">
        <div class="bg-white rounded-lg shadow-md p-4">
          <h3 class="text-[#06214E] text-lg font-semibold mb-3">¿Dónde hemos estado?</h3>
          <div class="space-y-2 max-h-[500px] overflow-y-auto">
            {proyectos.map(proyecto => (
              <div class="proyecto-item p-2 hover:bg-gray-50 rounded cursor-pointer" data-id={proyecto.id}>
                <h4 class="font-medium text-[#06214E]">{proyecto.nombre}</h4>
                <p class="text-sm text-gray-600">{proyecto.ubicacion.ciudad}, {proyecto.ubicacion.departamento}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Mapa -->
      <div class="w-full md:w-2/3">
        <div id="map" class="w-full h-[550px] rounded-lg shadow-md"></div>
      </div>
    </div>
  </div>
</section>

<style>
  #map {
    z-index: 0;
  }
  :global(.marker-pulse) {
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.18);
    border: 3px solid #fff;
    transition: box-shadow 0.2s, transform 0.2s;
    position: relative;
    overflow: visible;
  }
  :global(.pulse-circle) {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 100%;
    height: 100%;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    background: inherit;
    opacity: 0.4;
    z-index: 0;
    animation: pulse-soft 1.6s infinite;
  }
  :global(.marker-pulse.hover) {
    box-shadow: 0 4px 16px 0 rgba(0,0,0,0.28);
    transform: scale(1.18);
  }
  :global(.marker-pulse.hover) .pulse-circle {
    animation: pulse-strong 1s infinite;
    opacity: 0.6;
  }
  @keyframes pulse-soft {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0.4;
    }
    70% {
      transform: translate(-50%, -50%) scale(2.2);
      opacity: 0;
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0;
    }
  }
  @keyframes pulse-strong {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0.6;
    }
    70% {
      transform: translate(-50%, -50%) scale(2.5);
      opacity: 0;
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0;
    }
  }

  /* Estilos para el tooltip */
  :global(.leaflet-tooltip) {
    background-color: white;
    border: none;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    max-width: 300px !important;
    min-width: 250px !important;
  }

  :global(.custom-tooltip) {
    font-family: system-ui, -apple-system, sans-serif;
  }

  /* Estilos específicos para el contenido del tooltip */
  :global(.tooltip-content) {
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }

  :global(.tooltip-title) {
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
    line-height: 1.3;
  }

  :global(.tooltip-link) {
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
    display: block;
    margin-bottom: 4px;
  }

  /* Utilidades para truncar texto */
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script define:vars={{ proyectos }}>
  // Función para obtener el color según el tipo de proyecto
  const getColorByType = (tipo) => {
    const colors = {
      instalacion: '#06214E',
      mantenimiento: '#1a4b9c',
      consultoria: '#2c6cb0',
      venta: '#3d8cc4'
    };
    return colors[tipo] || '#06214E';
  };

  // Agrupar proyectos por coordenadas
  const proyectosPorCoord = {};
  proyectos.forEach(p => {
    const key = `${p.ubicacion.lat},${p.ubicacion.lng}`;
    if (!proyectosPorCoord[key]) proyectosPorCoord[key] = [];
    proyectosPorCoord[key].push(p);
  });

  // Inicializar el mapa cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    // Cargar Leaflet y MarkerCluster dinámicamente
    const leafletScript = document.createElement('script');
    leafletScript.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
    leafletScript.onload = () => {
      const clusterScript = document.createElement('script');
      clusterScript.src = 'https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js';
      clusterScript.onload = () => {
        const L = window.L;
        // Configuración del mapa
        const map = L.map('map').setView([4.5709, -74.2973], 6);
        // Añadir capa de mapa base
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Crear grupo de cluster
        const markerCluster = L.markerClusterGroup();

        Object.entries(proyectosPorCoord).forEach(([key, proyectosEnCoord]) => {
          const [lat, lng] = key.split(',').map(Number);
          const color = getColorByType(proyectosEnCoord[0].tipo);
          // Tooltip personalizado
          let tooltipHtml = '';
          if (proyectosEnCoord.length === 1) {
            const p = proyectosEnCoord[0];
            tooltipHtml = `
              <div class="tooltip-content p-3">
                <h4 class="tooltip-title font-bold text-[#06214E] text-lg mb-2 line-clamp-2">${p.nombre}</h4>
                <p class="text-sm mb-2 line-clamp-2">${p.descripcion}</p>
                <div class="text-xs text-gray-600 space-y-1">
                  <p><strong>Ubicación:</strong> ${p.ubicacion.ciudad}, ${p.ubicacion.departamento}</p>
                  <p><strong>Fecha:</strong> ${p.fecha}</p>
                  <p><strong>Capacidad:</strong> ${p.capacidad}</p>
                  <p class="line-clamp-3"><strong>Detalles:</strong> ${p.detalles}</p>
                </div>
              </div>
            `;
          } else {
            tooltipHtml = `
              <div class="tooltip-content p-3">
                <h4 class="tooltip-title font-bold text-[#06214E] text-lg mb-2">Proyectos en esta ubicación:</h4>
                <ul class="space-y-1">
                  ${proyectosEnCoord.map(p => `
                    <li>
                      <a href="/proyectos/${p.id}" class="tooltip-link text-blue-700 underline font-semibold line-clamp-2">${p.nombre}</a>
                    </li>
                  `).join('')}
                </ul>
              </div>
            `;
          }

          const marker = L.marker([lat, lng], {
            icon: L.divIcon({
              className: '',
              html: `<div class="marker-pulse" style="background:${color};width:28px;height:28px;border-radius:50%;border:3px solid #fff;box-shadow:0 2px 8px 0 rgba(0,0,0,0.18);position:relative;"><span class='pulse-circle'></span></div>`,
              iconSize: [28, 28],
              iconAnchor: [14, 14]
            })
          });

          marker.bindTooltip(tooltipHtml, {
            permanent: false,
            direction: 'top',
            className: 'custom-tooltip'
          });

          // Si solo hay un proyecto, redirige al hacer clic
          if (proyectosEnCoord.length === 1) {
            marker.on('click', () => {
              window.location.href = `/proyectos/${proyectosEnCoord[0].id}`;
            });
          }
          // Si hay varios, solo muestra el tooltip

          markerCluster.addLayer(marker);
        });

        map.addLayer(markerCluster);

        // Manejar clic en items de la lista de forma semántica usando el id
        document.querySelectorAll('.proyecto-item').forEach((item) => {
          item.addEventListener('click', () => {
            const id = item.getAttribute('data-id');
            const p = proyectos.find(p => String(p.id) === id);
            if (p) {
              map.setView([p.ubicacion.lat, p.ubicacion.lng], 12);
              // Buscar el marcador correspondiente y abrir el tooltip
              // No es trivial con clusters, pero el usuario verá el cluster abierto
            }
          });
        });
      };
      document.head.appendChild(clusterScript);
    };
    document.head.appendChild(leafletScript);

    // Cargar CSS de MarkerCluster
    const clusterCSS = document.createElement('link');
    clusterCSS.rel = 'stylesheet';
    clusterCSS.href = 'https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css';
    document.head.appendChild(clusterCSS);
    const clusterDefaultCSS = document.createElement('link');
    clusterDefaultCSS.rel = 'stylesheet';
    clusterDefaultCSS.href = 'https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css';
    document.head.appendChild(clusterDefaultCSS);
  });
</script>