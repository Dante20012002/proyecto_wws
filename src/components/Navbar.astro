---
interface Props {
  links: Array<{
    text: string;
    href: string;
  }>;
}

const { links } = Astro.props;
---

<nav class="sticky top-0 z-10 w-full bg-[#819392] text-white shadow">
  <div class="max-w-7xl mx-auto px-4 h-20 flex items-center justify-between relative">
    <!-- Logo a la izquierda -->
    <div class="flex items-center h-full flex-1">
      <a href="/" class="flex items-center gap-2 h-full group">
        <svg class="h-14">
          <use href="/assets/sprite.svg#logo-splash" />
        </svg>
        <span
          class="ml-2 font-bold text-xl hidden group-hover:text-[#C9D6D7] transition-colors duration-300"
          id="logo-placeholder">WWS</span
        >
      </a>
    </div>
    <!-- Links centrados solo en escritorio -->
    <ul class="hidden md:flex justify-center gap-16 h-full items-center flex-1">
      {
        links.map((link) => (
          <li class="relative flex flex-col items-center text-center">
            <a
              href={link.href}
              class="text-white hover:text-[#EAEAEA] font-semibold transition uppercase tracking-wide text-lg relative after:content-[''] after:absolute after:left-0 after:bottom-[-2px] after:w-full after:h-[2px] after:bg-[#EAEAEA] after:transform after:scale-x-0 after:origin-bottom-right after:transition-transform after:duration-300 hover:after:scale-x-100 hover:after:origin-bottom-left whitespace-nowrap"
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
    <!-- Botón hamburguesa solo en móvil -->
    <button id="menuButton" class="md:hidden flex items-center ml-auto" aria-label="Abrir menú">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24"
        ><path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path></svg
      >
    </button>
  </div>
  <!-- Menú móvil: ocupa el flujo normal, desplaza el contenido -->
  <div
    id="mobileMenu"
    class="w-full bg-[#06214E] shadow-md md:hidden transition-all duration-300 max-h-0 overflow-hidden"
  >
    <ul class="flex flex-col gap-4 py-4 px-6">
      {
        links.map((link) => (
          <li class="relative">
            <a
              href={link.href}
              class="block py-2 px-2 rounded text-white hover:bg-[#EAEAEA] hover:text-[#06214E] font-semibold transition uppercase tracking-wide text-base relative after:content-[''] after:absolute after:left-0 after:bottom-[-2px] after:w-full after:h-[2px] after:bg-[#06214E] after:transform after:scale-x-0 after:origin-bottom-right after:transition-transform after:duration-300 hover:after:scale-x-100 hover:after:origin-bottom-left"
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script>
  // Funcionalidad del menú móvil
  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  let isMenuOpen = false;

  menuButton?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    if (isMenuOpen) {
      mobileMenu?.classList.remove('max-h-0', 'overflow-hidden');
      mobileMenu?.classList.add('max-h-[500px]');
    } else {
      mobileMenu?.classList.add('max-h-0', 'overflow-hidden');
      mobileMenu?.classList.remove('max-h-[500px]');
    }
  });

  // Cerrar menú al hacer clic fuera
  document.addEventListener('click', (event) => {
    if (
      isMenuOpen &&
      !mobileMenu?.contains(event.target as Node) &&
      !menuButton?.contains(event.target as Node)
    ) {
      isMenuOpen = false;
      mobileMenu?.classList.add('max-h-0', 'overflow-hidden');
      mobileMenu?.classList.remove('max-h-[500px]');
    }
  });
</script>

